/*数据类型：
	int : 整型
	float: 浮点型
	date: 日期
	datetime: 日期时间
	char: 字符串型，固定长度；当清楚的知道该列字符长度可考虑char，如性别，手机号
	varchar: 字符串型，可变长度；当存储的数据长度变化很大可考虑使用varchar，如备注，地址
*/
/*约束条件：用来保证数据的完整性，限制不符合规范的数据进入数据库，确保数据存储的正确有效
	primary key: 主键，指定该列的值不能重复，且唯一
	not null: 非空，指定某列不能为空
	unque: 唯一，指某列的值不能出现重复
	default: 默认值
	foreign key: 外键，指定该列记录从属于主表的一条记录
	
*/
-- 创建部门表：dept
CREATE TABLE dept(
	deptno INT PRIMARY KEY,
	dname CHAR(20) DEFAULT  NULL,
	loc CHAR(20) NOT NULL
)
-- 向部门表中：dept 插入以下数据
INSERT  INTO dept(deptno,dname,loc) 
	 VALUES(10,'会计部','纽约'),
                 (20,'调查部','达拉斯'),
                 (30,'销售部','芝加哥'),
                 (40,'组织部','波士顿');
SELECT * FROM dept ;
DROP TABLE dept ;

-- 创建员工表
CREATE TABLE emp (  
	 empno INT PRIMARY KEY,  
	 ename CHAR(10),  
	 job CHAR(9),  
	 mgr INT,  
	 hiredate DATE,  
	 sal FLOAT,  
	 comm FLOAT,  
	 eptno INT,  
	 FOREIGN KEY(eptno) REFERENCES dept(deptno)  
);
DROP TABLE emp ;
-- 向员工表中：emp插入以下数据
INSERT  INTO emp(empno,ename,job,mgr,hiredate,sal,comm,eptno) 
	VALUES(7369,'SMITH','秘书',7902,'1980-12-17',800.00,NULL,20),
	      (7499,'ALLEN','推销员',7698,'1981-02-20',1600.00,300.00,30),
	      (7521,'WARD','推销员',7698,'1981-02-22',1250.00,500.00,30),
                (7566,'JONES','经理',7839,'1981-04-02',2975.00,NULL,20),
                (7654,'MARTIN','推销员',7698,'1981-09-28',1250.00,1400.00,30),
                (7698,'BLAKE','经理',7839,'1981-05-01',2850.00,NULL,30),
                (7782,'CLARK','经理',7839,'1981-06-09',2450.00,NULL,10),
                (7788,'SCOTT','分析师',7566,'1987-04-19',3000.00,NULL,20),
                (7839,'KING','总经理',NULL,'1981-11-17',5000.00,NULL,10),
                (7844,'TURNER','推销员',7698,'1981-09-08',1500.00,0.00,30),
                (7876,'ADAMS','秘书',7788,'1987-05-23',1100.00,NULL,20),
                (7900,'JAMES','秘书',7698,'1981-12-03',950.00,NULL,30),
                (7902,'FORD','分析师',7566,'1981-12-03',3000.00,NULL,20),
                (7934,'MILLER','秘书',7782,'1982-01-23',1300.00,NULL,10);
                

-- ---------------面试题：创建表:hotel-------------------------------------
CREATE TABLE hotel(
	accounts VARCHAR(10) ,  -- 账号
	details VARCHAR(10) NOT NULL, -- 消费
	dissipate DATE,  --  消费时间
	money FLOAT,  -- 金额
	class VARCHAR(10)  -- 班次
);
-- 向表中hotel 插入以下数据
INSERT INTO hotel(accounts,details,dissipate,money,class)
	 VALUES('S0001','住宿费','2014-01-01',280,'001'),
	       ('S0001','其它消费','2014-01-02',120,'001'),
	       ('S0001','住宿费','2014-01-08',300,'003'),
	       ('S0002','其它消费','2014-01-29',50,NULL),
	       ('S0003','住宿费','2014-01-31',180,'002'),
	       ('S0004','住宿费','2014-02-01',230,'001'),
	       ('S0005','其它消费','2014-02-01',100,NULL),
	       ('S0005','住宿费','2014-02-02',128,'001');
SELECT * FROM hotel ;
--  查询住宿费大于150元的账号


-- 查询出1月份每个账号住宿费和其它消费的总金额


-- 删除1月份班次为空的记录


-- 将不是住宿费的记账代码的班次改为‘002’


-- ---------------------------建表练习1--------------------------------------

/*现有一个商品的数据、记录客户及其购物情况，由下三张表组成
商品goods（商品号goodsid,商品名goodsname,单价untiprice,商品类别category，供应商provider）
客户customer（客户号customerid，姓名name,住址address，电邮email,性别sex，身份证cardid）
购买purchase（客户号customerid,商品号goodsid，购买数量nums）

1、建表，每个表的主外键，客户的姓名不能为空值；单价必须大于0，购买数量必须在1到30之间；电邮不能重复；客户的性别必须是男或女，默认是男；
*/
-- 创建商品表: goods


-- 创建客户表: customer


-- 创建购买表: purchase

-- ---------------------------建表练习2--------------------------------------
/* 用sql语句实现下列功能的sql语句代码
   创建 宿舍表字段有：宿舍号char(6)，宿舍电话
   要求：主键(宿舍号)，宿舍电话要以633开头的7位电话号码
   
   创建 同学表字段有：学号char(6),姓名，性别，年龄，名族，身份证，身份证号，宿舍号
   要求：主键(学号)，外键(宿舍号)，默认(民族)，非空(民族，姓名，年龄)，唯一(身份证号)，检查(性别)
*/
-- 创建宿舍表： sushe

-- 创建学生表: student

-- ------------------------数据的增删改练习--------------------------------
-- 1) 创建一张学生表，包含以下信息，学号，姓名，年龄，性别，联系电话，学历，入学日期，科目，分数
CREATE TABLE student(
       stuid INT,
       sname VARCHAR(20),
       age INT,
       sex CHAR(3),
       tel VARCHAR(20),
       xl  VARCHAR(10),
       rxrq DATE,
       kemu  VARCHAR(20),
       score INT
);


-- 2) 向学生表添加如下信息：  
　/*学号  姓名  年龄  性别  联系电话   学历   入学日期                      科目     分数
　　1	A     22    男    123456   小学   to_date('20140508',YYYYMMDD')  oracle   85
　　2	B     21	  男    119      高中   2015-4-7                       linux    
　　3	C     23	  男    110      高中   2014-8-18                      oracle   80
　　4	D     18    女    114      大专   2013-7-16                      QTP      76
*/ 


-- 3) 修改学生表的数据，将电话号码以11开头的学员的学历改为“大专” 


-- 4) 删除学生表的数据，姓名以C开头，性别为‘男'的记录删除 


-- 5) 查询学生表的数据，将所有年龄小于22岁的，学历为“大专”的，学生的姓名和学号显示出来


-- 6) 查询出所有学生的姓名，性别，并按年龄降序排列

-- 7) 给分数为空的学生的所有科目的分数统一改为80


-- 8) 查找出所有不同种类的学历


-- ------------------------查询(单表)--------------------------------
/*查询的总语句
select 列1,列2,列3...列N 或 *
from 表名/(表达式) -- 数据池
[where 过滤条件]
[group by 分组内容]
[having 组内条件]
[order by 排序方式]
*/
-- -- -- -- --无条件查询 -- -- -- -- -- 
-- 语法：
SELECT 列1,列2,列3...列N 或 *
FROM 表名;

-- 查询指定列
SELECT empno,ename,job,mgr,hiredate,sal,comm,deptno
FROM emp;

-- 查询查询所有列,用*表示所有列
SELECT * FROM emp;

-- -- -- -- --条件查询 -- -- -- -- -- 
-- 语法：
SELECT 字段1,字段2,...,字段n  或者 *
FROM 表名
WHERE 查询条件;

-- 查询条件的构成
1）、单值条件比较运算符： >  >=  <  <=   =   !=  <> ，比较运算符两边的数据类型要保持一致
2）、查询条件构成： 字段名  比较运算符  值
-- 例：查询20号部门中全体员工的姓名、工资、和工种的有关信息。


-- 练习：查找出奖金超过其工资的雇员的姓名、工资、奖金和工种的信息。

-- 例：显示出20号部门中不同的工种。使用关键字 distinct去重 



-- 多条件过滤之逻辑运算符:and、or
-- 例：查找出全部经理 和 第10号部门秘书的有关信息


-- 练习：查找出不是30号部门中的所有经理的所有信息。


-- 多值比较运算符：(not)between 值1 and 值2, in(指定的值), not in(指定的值)
-- 例:查找出工资在2000到3000之间的职工姓名、工种和工资


-- 练习：查找出工资在2500到3500之外的职工姓名、工种和工资


-- 例：查询出全部秘书、分析员或推销员的姓名、工种、工资和所在部门号


-- 模糊查询: like
%表示匹配任意长度的字符串
%test%:表示匹配中间字符串为test的任意长度的字符串

_表示仅能匹配一个字符
o_a:表示匹配长度为3，以字母o开头，且以字母a结尾的字符串，中间一个字符为任意字符。

-- 例：查询出名字以"MA"开头的全部职工的姓名、工种、工资和部门号


-- 例：查询出名字以"SCO"开头的，长度为5位的全部职工的姓名、工种、工资和部门号


-- is null 或 is not null
-- 例：查找出emp表中经理号(MGR)为空的职工的有关信息


-- 练习：查找出没有奖金的员工的姓名、工种、工资和部门号


-- --------------排序显示查询结果-----------------
-- 通常情况下，查询结果是以按数据在数据库表中存储的顺序显示的。若要使查询结果按某种特定顺序显示，就要使用“ORDER BY”子句。
-- 格式：
ORDER BY 字段名 ASC/DESC;
字段名，指出查询出来的结果按该字段排序；选项ASC表示按升序排序，DESC表示按降序排序；默认是按升序排序。
ORDER BY子句可以对查询结果按一个字段或多个字段进行排序。按多个字段排序时，先按前面的字段排序，当字段相同时，再按下一个字段排序。

-- 例：计算每个销售人员的年度总报酬，并按总报酬由高到低顺序显示


-- 1、查找出工资高于1000元的职工的姓名、工种、工资和部门号，并按部门号由小到大排序显示


-- 2、查找出奖金超过本人基本工资3%的职工的姓名，工资，奖金，奖金与工资的比例，并按其比例由高到低显示


-- 3、按工种升序，而同工种按工资降序排列显示全部职工的姓名，工种，工资。


-- -------------单表复杂查询(分组，聚合，统计函数)----------------
COUNT(*) -- 统计表中所有行的行数
SELECT COUNT(*) FROM emp;
COUNT(字段) -- 统计表中指定字段的非空行数
SELECT COUNT(comm) FROM emp;

SELECT COUNT(*) 总人数,
       COUNT(comm) comm的非空行数,
       SUM(sal) 总工资,
       AVG(sal) 平均工资,
       MAX(sal) 最高工资,
       MIN(sal) 最低工资
FROM emp;
-- 例：计算emp表中公司职工的总人数及工种数


-- 分组函数是将查询所获得满足条件的记录行为作为一组，并返回一个统计值。分组查询命令的基本格式为：
SELECT 字段名
FROM 表名
[WHERE 过滤条件]
[GROUP BY 字段];

-- 例：计算出公司支付给每个工种的总工资


-- 练习：统计各部门的人数。
 

-- 例：计算每个部门中每种工种各有多少职工数。


/*带条件的分组查询,利用"group by"子句将选择到的进行分组时，可以使用 having 子句用于限制选择的组，
having子句的作用同where子句相似，都是指定查询条件。不同的是where子句对行进行选择，检查每条记录是否满足条件，
而having子句是检查分组之后的各组是否满足条件。having子句是配合group by子句使用，在没有"group by"子句时不能用。
*/
SELECT 字段/表达式
FROM 表名
WHERE 单条记录的过滤条件
GROUP BY 字段
HAVING 分组函数的比较表达式;

-- 例：查询各工种组的年平均工资，要求每个工种组至少在2人以上


-- 练习1：查询出至少有两名秘书的所有部门的部门号，并按人数降序排序。


-- 练习2：查询出所有经理和销售人员的年平均工资，并按年平均工资降序排序。


-- ------------------多表查询-----------------------
/*内连接：用于从两个或多个表中检索相关数据的操作,通过在连接条件满足的情况下返回两个表中匹配的行,不匹配的行将被排除。
     语法：表1 inner join 表2 on 表1.公共字段=表2.公共字段
	公共字段指的是有主外键关系的字段
	内连接返回的结果是:两个表中的记录会互相匹配，如果满足条件就会合并成一条记录返回
*/
-- 例：查找所有员工所在的部门信息
SELECT * FROM emp INNER JOIN dept ON emp.eptno=dept.deptno ;
/*e.eptno=d.deptno的作用：该命令对两个表进行连接查询，mysql会扫描dept表，分别检查每条记录在连接条件e.deptno=d.deptno中所用列的值从emp表取出的记录的列值是否相等。
如果相等，则将这两个记录连接，产生一条新的记录作为查询到的一行，再继续从表emp中取下一条记录。
重复这个步骤，一直到处理完emp表的全部符合条件的记录。*/

-- 查询部门号是20,30,40的职工的员工编号，姓名，工资，部门所在位置。


-- 显示雇员名，雇员工资及所在的部门的名字，并按部门排序


-- 显示平均工资高于2000的部门号和它的平均工资



--- 查询的总思路：
1、分析题目，确定查找的数据涉及哪些表；
2、如果查找的数据，必须要涉及多张表，就要使用多表查询：
   A）、确定这些表之间是由哪些字段进行连接(确定这些表之间的相同字段)；
   B）、在ON语句后，使用=将这些字段连接起来。
3、如果需要对单条数据做过滤，就把过滤条件追加到WHERE语句后面，并用AND连接；
4、如果需要对多组数据进行统计，就要用到GROUP BY语句进行分组；
5、如果需要对分组后的数据进行过滤，就要用到HAVING语句；
6、如果需要对数据进行排序，就要用到ORDER BY语句。 

-- -- -- --左右连接 -- -- -- -- -- 
SELECT * FROM emp LEFT JOIN dept ON emp.eptno=dept.deptno ; -- 左连接，以左边数据为准
SELECT * FROM dept RIGHT JOIN emp ON emp.eptno=dept.deptno ; -- 右连接，以右边的表为准

-- 例：显示出所有部门的编号、名称和其职工的姓名与工种。

-- 练习：列出无雇员的部门的情况。

-- --- -- -- --子查询 -- -- --  -- 
-- 子查询:允许在一个查询中使用另一个查询的结果。子查询通常嵌套在另一个查询的条件或表达式中。
-- 格式：通常，主查询与子查询之间用"="、">"等比较运算符进行连接。
SELECT <列名表>
FROM 表名
WHERE 列表或表达式 比较运算符(SELECT 列名
				FROM 表名
				WHERE 条件);

-- 例：查找出与“SMITH”在同一个部门工作的所有职工姓名及工资
-- 分析思路：


-- 1、查找出工资比"SCOTT"工资高的职工的名字，工种，工资和所在的部门号，并按工资升序排序。


-- 2、查找出具有最高月工资的雇员的姓名、工种和工资。 



/*复制表结构格式：
	create table 新表名 like 原始表;
*/
CREATE TABLE dept_back LIKE dept;

/*复制表结构和数据格式：
	create table 新表名 as(
		select 字段1,字段2 from 原始表 
		);
*/
CREATE TABLE dept_back AS( 
	SELECT deptno,dname,loc FROM dept 
);


SELECT * FROM dept ;
SELECT * FROM emp ;